/*
 * MC2_Test.c
 *
 *  Created on: Oct 24, 2022
 *      Author: kollaly
 */

#include "main2F.h"
#include <avr/io.h>


uint8 wrongPassTrials = 0;
uint8 g_seconds = 0 ;
uint8 recievedPass[PASS_SIZE];
uint8 storePass[PASS_SIZE];


int main (void){
	uint8 i ;

	SREG |=(1<<SREG_I);
	UART_ConfigType uart_config = {PARITY_DISABLED,OneStopBit,DataBits_8,9600};
	UART_init(&uart_config);
	Timer_ConfigType timer1_config = {Timer1,0,7813,COMPARE_MODE,DONT_CARE,PRESCALER_1024};
	Timer_init(&timer1_config);
	TWI_ConfigType twi_config = {CONTROL_ECU_ADD,PRESCALER__1,0x02};
	TWI_init(&twi_config);
	Timer_setCallBack(timer1HandlerCallBack,Timer1);
	DcMotor_init();
	Buzzer_init();
	setPassFirstTime();
	uint8 recived_info = 0;

	while(1){
		if (UART_recieveByte() == READY_TO_SEND){
			for(i=0;i<PASS_SIZE;i++){
				recievedPass[i] = UART_recieveByte();
				_delay_ms(100);
			}
			recived_info = UART_recieveByte();
	}
		switch (recived_info){
		case '+' :
			if (checkPasswordMatch(storePass, recievedPass)== PASSWORDS_ARE_SAME) {
							UART_sendByte(DOOR_UNLOCK);
							openDoorOperation();
							wrongPassTrials = 0;
						} else {
							UART_sendByte(WRONG_PASS);
							wrongPassTrials++;
							if (wrongPassTrials == MAX_WRONG_PASS_TRIALS) {
								Buzzer_on();
								g_seconds = 0;
								while (g_seconds < BUZZER_TIME){}
								Buzzer_off();
								wrongPassTrials = 0;
							}
						}
			break;
		case '-' :
			if (checkPasswordMatch(storePass, recievedPass) == PASSWORDS_ARE_SAME) {
				UART_sendByte(CHANGE_PASS);
				setPassFirstTime();
			} else {
				UART_sendByte(WRONG_PASS);
			}
			break;
		}

}
}



void setPassFirstTime(void){
	uint8 i ;

	uint8 checkPass[PASS_SIZE];
	uint8 checkFlag = 0;
	while(checkFlag == 0){
		while (UART_recieveByte() != READY_TO_SEND){}
		UART_sendByte(READY_TO_RECIEVE);
		for(i=0;i<PASS_SIZE;i++){
			recievedPass[i] = UART_recieveByte();
			_delay_ms(100);
		}
		while (UART_recieveByte() != READY_TO_SEND){}
		UART_sendByte(READY_TO_RECIEVE);
		for(i=0;i<PASS_SIZE;i++){
			checkPass[i] = UART_recieveByte();
			_delay_ms(100);
		}

		if ( checkPasswordMatch(recievedPass,checkPass) == PASSWORDS_ARE_SAME){
			UART_sendByte(READY_TO_SEND);
			UART_sendByte(PASSWORDS_ARE_SAME);
			savePassInEEProm();
			checkFlag = 1;
		}
		else if ( checkPasswordMatch(recievedPass,checkPass) == PASSWORDS_ARE_DIFF){
			UART_sendByte(READY_TO_SEND);
			UART_sendByte(PASSWORDS_ARE_DIFF);
		}
		}
	}



uint8 checkPasswordMatch(uint8 *pass1,uint8 *pass2){
	updateStoredPassword();
	uint8 i ;

	for (i = 0; i < PASS_SIZE; i++) {
		if (pass1[i] != pass2[i]) {
			return PASSWORDS_ARE_DIFF;
		}
	}
	return PASSWORDS_ARE_SAME;
}

void savePassInEEProm(void) {
	uint8 i ;
	for (i = 0; i < PASS_SIZE; i++) {
		EEPROM_writeByte(EEPROM_STORE_ADDREESS + i, recievedPass[i]);
		_delay_ms(100);
	}
}

void openDoorOperation(void){
	g_seconds = 0;
	DcMotor_Rotate(CW);
	while(g_seconds < OPEN_TIME){}
	g_seconds = 0;
	DcMotor_Rotate(STOP);
	while(g_seconds < HOLD_TIME){}
	g_seconds = 0;
	DcMotor_Rotate(ACW);
	while(g_seconds < CLOSE_TIME){}
	DcMotor_Rotate(STOP);
}

void updateStoredPassword(void){
	uint8 i ;
	for (i=0;i<PASS_SIZE;i++){
		EEPROM_readByte(EEPROM_STORE_ADDREESS+i, storePass+i);
	}
}


void timer1HandlerCallBack(void){
	g_seconds++;
}
