/*
 * Timer.c
 *
 *  Created on: Oct 24, 2022
 *      Author: kollaly
 */

#include "Timer.h"
#include <avr/io.h>
#include "gpio.h"
#include "common_macros.h"
#include <avr/interrupt.h>

static volatile void (*g_callBackPtr0)(void) = NULL_PTR;
static volatile void (*g_callBackPtr1)(void) = NULL_PTR;
static volatile void (*g_callBackPtr2)(void) = NULL_PTR;

ISR( TIMER0_OVF_vect) {
	if (g_callBackPtr0 != NULL_PTR) {
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
	}
}

ISR( TIMER0_COMP_vect) {
	if (g_callBackPtr0 != NULL_PTR) {
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
	}
}

ISR( TIMER1_OVF_vect) {
	if (g_callBackPtr1 != NULL_PTR) {
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
	}
}

ISR( TIMER1_COMPA_vect) {
	if (g_callBackPtr1 != NULL_PTR) {
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
	}
}

ISR( TIMER2_OVF_vect) {
	if (g_callBackPtr2 != NULL_PTR) {
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
	}
}

ISR( TIMER2_COMP_vect) {
	if (g_callBackPtr2 != NULL_PTR) {
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
	}
}

void Timer_init(const Timer_ConfigType *Config_Ptr) {

	if ((Config_Ptr->prescaler2) == DONT_CARE) {

		if ((Config_Ptr->timer_id) == Timer0) {

			TCCR0 = (Config_Ptr->prescaler);
			TCNT0 = Config_Ptr->initial_value;

			if (((Config_Ptr->mode) == NORMAL_MODE)) {
				TCCR0 |= (1 << FOC0);
				TIMSK = (1 << TOIE0);
			}

			else if ((Config_Ptr->mode) == COMPARE_MODE) {
				OCR0 = Config_Ptr->compare_value;
				TCCR0 |= (1 << FOC0) | (1 << WGM01) | (1 << COM01);
				TIMSK = (1 << OCIE0);
			}

			else if ((Config_Ptr->mode) == FAST_PWM_MODE) {
				//OCR0 = 255 ;
				OCR0 = Config_Ptr->compare_value;
				GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
				TCCR0 |= (1 << WGM01) | (1 << WGM00) | (1 << COM01);

			}
		}

		else if ((Config_Ptr->timer_id) == Timer1) {
			TCNT1 = Config_Ptr->initial_value;

			TCCR1B = ((Config_Ptr->mode) << WGM12) | ((Config_Ptr->prescaler));

			if ((Config_Ptr->mode) == NORMAL_MODE) {
				TCCR1A = (1 << FOC1A);
				TIMSK = (1 << TOIE1);
			} else if ((Config_Ptr->mode) == COMPARE_MODE) {
				OCR1A = Config_Ptr->compare_value;
				TCCR1A = (1 << FOC1A) | (1 << COM1A1);
				TIMSK = (1 << OCIE1A);
			} else if ((Config_Ptr->mode) == FAST_PWM_MODE) {
				OCR0 = Config_Ptr->compare_value;
				GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
				TCCR1A = (1 << WGM10) | (1 << WGM11) | (1 << COM1A1);
			}

		}
	}
		else if ((Config_Ptr->prescaler) == DONT_CARE) {

			if ((Config_Ptr->timer_id) == Timer2) {

				TCCR2 = (Config_Ptr->prescaler2);
				TCNT2 = Config_Ptr->initial_value;

				if (((Config_Ptr->mode) == NORMAL_MODE)) {
					TCCR2 |= (1 << FOC2);
					TIMSK = (1 << TOIE2);
				}

				else if ((Config_Ptr->mode) == COMPARE_MODE) {
					OCR2 = Config_Ptr->compare_value;
					TCCR2 |= (1 << FOC2) | (1 << WGM21) | (1 << COM21);
					TIMSK = (1 << OCIE2);
				}

				else if ((Config_Ptr->mode) == FAST_PWM_MODE) {
					OCR2 = Config_Ptr->compare_value;
					GPIO_setupPinDirection(PORTD_ID, PIN7_ID, PIN_OUTPUT);
					TCCR2 |= (1 << WGM21) | (1 << WGM20) | (1 << COM21);

				}
			}

		}

	}

	void Timer_deInit(Timer_ID ID) {
		if (ID == Timer0) {
			TCCR0 = 0;
			TCNT0 = 0;
			OCR0 = 0;
			CLEAR_BIT(TIMSK, OCIE0);
			CLEAR_BIT(TIMSK, TOIE0);
			g_callBackPtr0 = NULL_PTR;
		} else if (ID == Timer1) {
			TCNT1 = 0;
			OCR1A = 0;
			TCCR1A = 0;
			TCCR1B = 0;
			g_callBackPtr1 = NULL_PTR;
		} else if (ID == Timer2) {
			TCCR2 = 0;
			TCNT2 = 0;
			OCR2 = 0;
			CLEAR_BIT(TIMSK, OCIE2);
			CLEAR_BIT(TIMSK, TOIE2);
			g_callBackPtr2 = NULL_PTR;
		} else {
			return;
		}

	}

	void Timer_setCallBack(void (*a_ptr)(void), Timer_ID ID) {

		if (ID == Timer0) {
			g_callBackPtr0 = a_ptr;
		} else if (ID == Timer1) {
			g_callBackPtr1 = a_ptr;
		} else if (ID == Timer2) {
			g_callBackPtr2 = a_ptr;
		} else {
			return;
		}

	}

